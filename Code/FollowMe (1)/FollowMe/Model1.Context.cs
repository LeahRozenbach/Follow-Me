//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FollowMe
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class FollowMeDBEntities : DbContext
    {
        public FollowMeDBEntities()
            : base("name=FollowMeDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ActiveAntenna> ActiveAntenna { get; set; }
        public DbSet<ArchiveOrder> ArchiveOrder { get; set; }
        public DbSet<Colors> Colors { get; set; }
        public DbSet<ConnectionDetailsInStation> ConnectionDetailsInStation { get; set; }
        public DbSet<Order> Order { get; set; }
        public DbSet<OrderDetails> OrderDetails { get; set; }
        public DbSet<Owners> Owners { get; set; }
        public DbSet<Process> Process { get; set; }
        public DbSet<ProcessDetails> ProcessDetails { get; set; }
        public DbSet<Reading> Reading { get; set; }
        public DbSet<Station> Station { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<Table> Table { get; set; }
        public DbSet<Readers> Readers { get; set; }
    
        public virtual ObjectResult<ActiveAntennaSelect_Result> ActiveAntennaSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActiveAntennaSelect_Result>("ActiveAntennaSelect", idParameter);
        }
    
        public virtual int ActiveAntennasInsert(Nullable<int> ant1, Nullable<int> ant2, Nullable<int> ant3, Nullable<int> ant4)
        {
            var ant1Parameter = ant1.HasValue ?
                new ObjectParameter("Ant1", ant1) :
                new ObjectParameter("Ant1", typeof(int));
    
            var ant2Parameter = ant2.HasValue ?
                new ObjectParameter("Ant2", ant2) :
                new ObjectParameter("Ant2", typeof(int));
    
            var ant3Parameter = ant3.HasValue ?
                new ObjectParameter("Ant3", ant3) :
                new ObjectParameter("Ant3", typeof(int));
    
            var ant4Parameter = ant4.HasValue ?
                new ObjectParameter("Ant4", ant4) :
                new ObjectParameter("Ant4", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActiveAntennasInsert", ant1Parameter, ant2Parameter, ant3Parameter, ant4Parameter);
        }
    
        public virtual ObjectResult<AllOrdersSelect_Result> AllOrdersSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllOrdersSelect_Result>("AllOrdersSelect");
        }
    
        public virtual int ArchiveOrderInsert(Nullable<int> orderId, Nullable<int> ownerId, Nullable<int> amount, Nullable<System.DateTime> orderDate, Nullable<System.DateTime> finishDate)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var finishDateParameter = finishDate.HasValue ?
                new ObjectParameter("FinishDate", finishDate) :
                new ObjectParameter("FinishDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ArchiveOrderInsert", orderIdParameter, ownerIdParameter, amountParameter, orderDateParameter, finishDateParameter);
        }
    
        public virtual ObjectResult<ArchiveOrdersDateSelect_Result> ArchiveOrdersDateSelect(Nullable<System.DateTime> orderDate, Nullable<System.DateTime> finishDate)
        {
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var finishDateParameter = finishDate.HasValue ?
                new ObjectParameter("FinishDate", finishDate) :
                new ObjectParameter("FinishDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArchiveOrdersDateSelect_Result>("ArchiveOrdersDateSelect", orderDateParameter, finishDateParameter);
        }
    
        public virtual ObjectResult<ArchiveOrdersSelect_Result> ArchiveOrdersSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ArchiveOrdersSelect_Result>("ArchiveOrdersSelect");
        }
    
        public virtual int ColorsInsert(string colorName)
        {
            var colorNameParameter = colorName != null ?
                new ObjectParameter("ColorName", colorName) :
                new ObjectParameter("ColorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ColorsInsert", colorNameParameter);
        }
    
        public virtual ObjectResult<ColorsSelect_Result> ColorsSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ColorsSelect_Result>("ColorsSelect");
        }
    
        public virtual ObjectResult<string> company(string company)
        {
            var companyParameter = company != null ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("company", companyParameter);
        }
    
        public virtual int ConnectionDetailsInStationInsert(Nullable<int> stationId, Nullable<int> antenna, Nullable<int> readerId)
        {
            var stationIdParameter = stationId.HasValue ?
                new ObjectParameter("StationId", stationId) :
                new ObjectParameter("StationId", typeof(int));
    
            var antennaParameter = antenna.HasValue ?
                new ObjectParameter("Antenna", antenna) :
                new ObjectParameter("Antenna", typeof(int));
    
            var readerIdParameter = readerId.HasValue ?
                new ObjectParameter("ReaderId", readerId) :
                new ObjectParameter("ReaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConnectionDetailsInStationInsert", stationIdParameter, antennaParameter, readerIdParameter);
        }
    
        public virtual ObjectResult<CurrentStation_Result> CurrentStation(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurrentStation_Result>("CurrentStation", orderIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> DateSelect(string pass, string company)
        {
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("DateSelect", passParameter, companyParameter);
        }
    
        public virtual int deleteOrders(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteOrders", orderIdParameter);
        }
    
        public virtual int OrderDelete(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderDelete", orderIdParameter);
        }
    
        public virtual int OrderDetailsInsert(Nullable<System.DateTime> date, Nullable<int> ownerId, Nullable<int> process, Nullable<int> amount, string firstEPC, string lastEPC)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            var processParameter = process.HasValue ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var firstEPCParameter = firstEPC != null ?
                new ObjectParameter("firstEPC", firstEPC) :
                new ObjectParameter("firstEPC", typeof(string));
    
            var lastEPCParameter = lastEPC != null ?
                new ObjectParameter("lastEPC", lastEPC) :
                new ObjectParameter("lastEPC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderDetailsInsert", dateParameter, ownerIdParameter, processParameter, amountParameter, firstEPCParameter, lastEPCParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> OrderIdSelect(string pass, string company)
        {
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("OrderIdSelect", passParameter, companyParameter);
        }
    
        public virtual int OrdersDelete(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrdersDelete", orderIdParameter);
        }
    
        public virtual int OwnersInsert(string firstName, string lastName, string pass, string company, string address, string phone)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OwnersInsert", firstNameParameter, lastNameParameter, passParameter, companyParameter, addressParameter, phoneParameter);
        }
    
        public virtual ObjectResult<OwnersSelect_Result> OwnersSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OwnersSelect_Result>("OwnersSelect");
        }
    
        public virtual ObjectResult<string> Pass(string pass, string company)
        {
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Pass", passParameter, companyParameter);
        }
    
        public virtual int ProcessDetailsInsert(Nullable<int> readerId, Nullable<int> minutes, string moreDetails)
        {
            var readerIdParameter = readerId.HasValue ?
                new ObjectParameter("ReaderId", readerId) :
                new ObjectParameter("ReaderId", typeof(int));
    
            var minutesParameter = minutes.HasValue ?
                new ObjectParameter("Minutes", minutes) :
                new ObjectParameter("Minutes", typeof(int));
    
            var moreDetailsParameter = moreDetails != null ?
                new ObjectParameter("MoreDetails", moreDetails) :
                new ObjectParameter("MoreDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessDetailsInsert", readerIdParameter, minutesParameter, moreDetailsParameter);
        }
    
        public virtual ObjectResult<ProcessDetailsSelect_Result> ProcessDetailsSelect(Nullable<int> processId)
        {
            var processIdParameter = processId.HasValue ?
                new ObjectParameter("ProcessId", processId) :
                new ObjectParameter("ProcessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessDetailsSelect_Result>("ProcessDetailsSelect", processIdParameter);
        }
    
        public virtual int ProcessesInsert(string name, Nullable<int> colorId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessesInsert", nameParameter, colorIdParameter);
        }
    
        public virtual ObjectResult<ProcessesSelect_Result> ProcessesSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessesSelect_Result>("ProcessesSelect");
        }
    
        public virtual ObjectResult<ProcessIdSelect_Result> ProcessIdSelect(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessIdSelect_Result>("ProcessIdSelect", orderIdParameter);
        }
    
        public virtual int ReaderDelete(Nullable<int> readerId)
        {
            var readerIdParameter = readerId.HasValue ?
                new ObjectParameter("ReaderId", readerId) :
                new ObjectParameter("ReaderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReaderDelete", readerIdParameter);
        }
    
        public virtual int ReaderInsert(string name, string area, string ip)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReaderInsert", nameParameter, areaParameter, ipParameter);
        }
    
        public virtual ObjectResult<ReaderSelect_Result> ReaderSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReaderSelect_Result>("ReaderSelect");
        }
    
        public virtual ObjectResult<ReadingForOrderIdSelect_Result> ReadingForOrderIdSelect(string firstEPC, string lastEPC)
        {
            var firstEPCParameter = firstEPC != null ?
                new ObjectParameter("FirstEPC", firstEPC) :
                new ObjectParameter("FirstEPC", typeof(string));
    
            var lastEPCParameter = lastEPC != null ?
                new ObjectParameter("LastEPC", lastEPC) :
                new ObjectParameter("LastEPC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadingForOrderIdSelect_Result>("ReadingForOrderIdSelect", firstEPCParameter, lastEPCParameter);
        }
    
        public virtual int ReadingInsert(string ePC, Nullable<int> readerId, Nullable<int> antena, Nullable<System.DateTime> time)
        {
            var ePCParameter = ePC != null ?
                new ObjectParameter("EPC", ePC) :
                new ObjectParameter("EPC", typeof(string));
    
            var readerIdParameter = readerId.HasValue ?
                new ObjectParameter("ReaderId", readerId) :
                new ObjectParameter("ReaderId", typeof(int));
    
            var antenaParameter = antena.HasValue ?
                new ObjectParameter("Antena", antena) :
                new ObjectParameter("Antena", typeof(int));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReadingInsert", ePCParameter, readerIdParameter, antenaParameter, timeParameter);
        }
    
        public virtual ObjectResult<ReadingSelect_Result> ReadingSelect(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadingSelect_Result>("ReadingSelect", orderIdParameter);
        }
    
        public virtual ObjectResult<string> Showselect(Nullable<int> processId)
        {
            var processIdParameter = processId.HasValue ?
                new ObjectParameter("ProcessId", processId) :
                new ObjectParameter("ProcessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Showselect", processIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<StationAndTime_Result> StationAndTime(Nullable<int> processId)
        {
            var processIdParameter = processId.HasValue ?
                new ObjectParameter("ProcessId", processId) :
                new ObjectParameter("ProcessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StationAndTime_Result>("StationAndTime", processIdParameter);
        }
    
        public virtual ObjectResult<StationAndTimeSelect_Result> StationAndTimeSelect(Nullable<int> processId)
        {
            var processIdParameter = processId.HasValue ?
                new ObjectParameter("ProcessId", processId) :
                new ObjectParameter("ProcessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StationAndTimeSelect_Result>("StationAndTimeSelect", processIdParameter);
        }
    
        public virtual int StationDelete(Nullable<int> stationId)
        {
            var stationIdParameter = stationId.HasValue ?
                new ObjectParameter("StationId", stationId) :
                new ObjectParameter("StationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StationDelete", stationIdParameter);
        }
    
        public virtual int StationInsert(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StationInsert", nameParameter);
        }
    
        public virtual ObjectResult<StationSelect_Result> StationSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StationSelect_Result>("StationSelect");
        }
    
        public virtual ObjectResult<StoredProcedure2_Result> StoredProcedure2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StoredProcedure2_Result>("StoredProcedure2");
        }
    
        public virtual ObjectResult<Nullable<int>> TimeProcess(Nullable<int> processId)
        {
            var processIdParameter = processId.HasValue ?
                new ObjectParameter("ProcessId", processId) :
                new ObjectParameter("ProcessId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TimeProcess", processIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> TimeRead(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("TimeRead", orderIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> TimeReadSelect(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("TimeReadSelect", orderIdParameter);
        }
    }
}
